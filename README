-*- text -*-

			LazyCat

LazyCat is a tool which allows you serve cluster of Linux hosts in
comfortable way. The main idea is that you can install, upgrade or
remove software on all hosts at the same time, and get general view of
what is going on with your cluster.

LazyCat is distributed under the terms of GNU GPLv3 license or (at
your option) any later version. See COPYING for details.

For information about open issues and ideas about development of the
project see TODO file.

	ARCHITECTURE

LazyCat consists of the four main parts: a GUI, the server, proxies
and optional clients that running on hosts (see figure 1.1 below).

The top part of the server is written in Scheme, which is a dialect of
the Lisp language. Why Scheme? Because it is good for hacking and
making new features upon the core of a program. LazyCat was written to
be extensible, to fit to user's needs.

The bottom part of the server is written in C, and offers API
functions which can be called from a Scheme code. This part contains
DB which stores basic information about hosts. Other job that the
server does on this level is sending messages through proxies.

Proxies are processes which are used by the server to sending messages
through computer network. A proxy is just a function which is executed
in different process.

	+--------------------------------------------+
	| GUI (Scheme)                               |
	+---------------------API--------------------+
	| Server (C)                                 |
	+--------------------------------------------+
	          ^                        ^
	          |      Unix sockets      |
	          v                        v
	+-------------------+    +-------------------+
	| Proxy (C)         |    | Proxy (C)         |
	+-------------------+    +-------------------+
	          ^                        ^
	..........|.........Network........|..........
	          v                        v
	+-------------------+    +-------------------+
	| Host              |    | Host              |
	+-------------------+    +-------------------+
	
	figure 1.1: LazyCat architecture


Right now LazyCat contains TCP and SSH proxy. I don't recommend you to
use TCP proxy in the real tasks because it hasn't got any
authentification mechanism yet, and sends data as unencrypted text
streams.

SSH proxy uses authorisation based on public keys. To use this proxy
you must have SSH daemon running on the every host.

	USAGE

After building LazyCat from lazy sources (see INSTALL for details
about this process), you can run it from command line - just type
follows:

  $ ./lazycat

and you'll get the Guile shell extended with LazyCat API. That's
it. You can use LazyCat right now, by using LazyCat API directly. At
first you have to load (lazycat builtins) module to be able to use
API:

  guile> (use-modules (lazycat builtins))

Then you can add new hosts to the cluster:

  guile> (lc-add-host "tcp-proxy" "127.0.0.1:50001" "localhost" "My first Lazy Server")
  1
  guile> (lc-add-host "tcp-proxy" "127.0.0.2:50001" "localhost" "My second Lazy Server")
  2

  ...

Now you can get list of hosts:

  guile> (lc-get-host-list)
  '(1 2 3)

and, of course, you can do something useful with this:

  guile> (lc-send-msg 1 "uname")
  Linux

But wait, where is the promised perfect GUI with beautiful buttons,
menus etc? OK, try run this script that you can find in the root dir
of the repository:

  ./lazycat-gtk.sh

This script makes instance of the <lazy-gtk-cat> application and
then runs it.

	HACKING

The server uses GNU Guile extension language upon C code, which allows
to call C functions from Scheme code and vice versa. It means that you
can extend and improve the server without knowledge of C language.

In fact, the server is a Scheme interpreter extended with LazyCat
API. So you can easy build your own GUI or even use LazyCat in the
batch mode.

Happy hacking!
