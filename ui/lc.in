#!/bin/sh
# aside from this initial boilerplate, this is actually -*- scheme -*- code
export GUILE_LOAD_PATH=__DATA_DIR__
main='(module-ref (resolve-module '\''(lazycat ui lc)) '\'main')'
exec ${GUILE-guile} -l $0 -c "(apply $main (command-line))" "$@"
!#


;;; lc -- A CLI for LazyCat.

;; Copyright (C) 2013, 2014 Artyom Poptsov <poptsov.artyom@gmail.com>
;;
;; This file is part of LazyCat.
;;
;; LazyCat is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; LazyCat is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with LazyCat.  If not, see <http://www.gnu.org/licenses/>.


;;; Commentary:

;; A CLI for LazyCat.
;;
;; Usage: lc <command> [ args ]
;;
;; Possible commands:
;;   a, add     -- add a new host
;;   d, diff    -- compare outputs from hosts
;;   e, exec    -- execute a command
;;   l, list    -- list objects
;;   r, rem     -- remove host
;;   s, set     -- set a new value for an option
;;   stop       -- stop LazyCat daemon
;;   version    -- print current version
;;
;; See "<command> --help" for more information.


;;; Code:

(define-module (lazycat ui lc)
  #:use-module (oop goops)
  #:use-module (ice-9 getopt-long)
  #:use-module (ice-9 rdelim)
  #:use-module (ice-9 format)
  #:use-module (ice-9 getopt-long)
  #:use-module (srfi srfi-1)            ;fold
  #:use-module (lazycat ui cli pretty-format)
  #:use-module (lazycat protocol)
  #:use-module (lazycat message)
  #:use-module (lazycat utils)
  #:export (<lc> main))


;;; Constants

(define *version* "0.2")

(define *error-connection-lost*
  "connection to the server lost\n")


;;; Global symbols

(define server-socket-path "/tmp/lazycat/server")
(define server-port (socket PF_UNIX SOCK_STREAM 0))


;;; Methods

(define (lc-quit)
  "Quit the application."
  (close server-port))

;; 
(define (send-message msg-req)
  "Send a MESSAGE of TYPE to the server."
  (message-send msg-req server-port)
  (message-recv server-port))


(define (handle-add args)
  "Add a new host."
  (define option-spec
    '((help        (single-char #\h) (value #f))
      (group       (single-char #\g) (value #t))
      (name        (single-char #\n) (value #t))
      (proxy-list  (single-char #\p) (value #t))
      (address     (single-char #\a) (value #t))
      (description (single-char #\d) (value #t))))

  (define (print-help)
    (display
     (string-append
      "Usage: lc add -g <group> -n <name> -p <proxy1>\n"
      "              -a <address> -d <description>\n"
      "Options:\n"
      "  -g <group>, --group=<group>                    Group for the new host\n"
      "  -n <name>, --name=<name>                       Host name\n"
      "  -p <proxy>, --proxy=<proxy>                    Proxy which will be used to reach the host\n"
      "  -a <address>, --address=<address>              Host address\n"
      "  -d <description>, --description=<description>  Description of the host\n"
      "\n"
      "Example:\n"
      "  $ lc add -g home-network -n lazy-pc1 -p ssh-proxy \\\n"
      "           -a \"avp@pc1:22\" -d \"A lazy computer\"\n")))

  (if (null? args)

      (print-help)

      (let* ((args         (cons "handle-add" args))
             (options      (getopt-long args option-spec))
             (help-needed? (option-ref options 'help        #f))
             (group        (option-ref options 'group       #f))
             (name         (option-ref options 'name        #f))
             (proxy-list   (option-ref options 'proxy-list  #f))
             (address      (option-ref options 'address     #f))
             (description  (option-ref options 'description "")))

        (if help-needed?

            (print-help)

            (let ((msg-req (make <message>
                             #:type         *cmd-add-host*
                             #:request-flag #t)))

              (message-field-set! msg-req 'group       group)
              (message-field-set! msg-req 'name        name)

              ;; FIXME: Temporary solution
              (message-field-set! msg-req 'proxy-list  (list proxy-list))

              (message-field-set! msg-req 'address     address)
              (message-field-set! msg-req 'description description)

              (let ((msg-rsp (send-message msg-req)))
                (if msg-rsp
                    (if (message-error? msg-rsp)
                        (format-error-message msg-rsp))
                    (format-error *error-connection-lost*))))))))


(define (handle-rem args)
  "Remove a host."
  (define (print-help)
    (display
     (string-append
      "Usage: lc rem <host-id>\n"
      "\n"
      "Example:\n"
      "  $ lc rem 5\n")))

  (if (or (null? args)
          (string=? (car args) "--help") (string=? (car args) "-h"))

      (print-help)

      (let ((msg-req (make <message> #:type *cmd-rem-host* #:request-flag #t)))
        (message-field-set! msg-req 'host-id (string->number (car args)))

        (message-format msg-req)    ;DEBUG

        (let ((msg-rsp (send-message msg-req)))
          (if msg-rsp
              (if (message-error? msg-rsp)
                  (format-error-message msg-rsp))
              (format-error *error-connection-lost*))))))


;;; exec handler

(define (handle-exec args)
  "A function that handles command line for 'exec' command."

  (define option-spec
    '((help      (single-char #\h) (value #f))
      (host-id   (single-char #\n) (value #t))
      (translate (single-char #\t) (value #f))))

  (define (print-help)
    (display
     (string-append
      "Usage: lc exec [ options ] -- <command>\n"
      "\n"
      "Options:\n"
      "  --host-id=<id>, -n <id>  Execute a command on the specified host.\n"
      "  --translate, -t          Translate a command to the native command,\n"
      "                           understood by a specific package manager.\n"
      "  --help, -h               Print this message end exit.\n"
      "\n"
      "Examples:\n"
      "  $ lc exec -- uname -a\n"
      "  $ lc exec --host-id=2 uptime\n"
      "  $ lc exec -n 2 -- uptime -a\n")))

  (if (null? args)

      (print-help)

      (let* ((opt-args     (cons "handle-exec" args))
             (options      (getopt-long opt-args option-spec))
             (help-needed? (option-ref options 'help #f))
             (translate?   (option-ref options 'translate #f))
             (host-id      (option-ref options 'host-id #f))
             (cmd          (option-ref options '() #f)))

        (cond

         (help-needed?
          (print-help))

         ((not cmd)
          (format-error "No command is specified."))

         (host-id
          (let ((id (string->number host-id)))
            (if id
                (exec-cmd-on-host translate? id cmd)
                (let ((msg (string-append "Wrong host ID: "
                                          (object->string host-id))))
                  (format-error msg)))))

         ((not host-id)
          (exec-cmd translate? cmd))))))

(define (exec-cmd translate? cmd)
  "Execute a command CMD on the every accessible host."
  (let ((msg-req (make <message> #:type *cmd-exec* #:request-flag #t)))
    (message-field-set! msg-req 'translate? translate?)
    (message-field-set! msg-req 'command cmd)
    (let ((msg-rsp (send-message msg-req)))
      (if msg-rsp
          (if (not (message-error? msg-rsp))
              (format-output-list (message-field-ref msg-rsp 'output))
              (format-error-message msg-rsp))
          (format-error *error-connection-lost*)))))

(define (exec-cmd-on-host translate? host-id cmd)
  "Execute a command CMD on a host with the given HOST-ID."
  (let ((msg-req (make <message> #:type *cmd-exec* #:request-flag #t)))
    (message-field-set! msg-req 'translate? translate?)
    (message-field-set! msg-req 'host-id host-id)
    (message-field-set! msg-req 'command cmd)

    (let ((msg-rsp (send-message msg-req)))
      (if msg-rsp
          (if (not (message-error? msg-rsp))
              (format-output-list (message-field-ref msg-rsp 'output))
              (format-error-message msg-rsp))
          (format-error *error-connection-lost*)))))

;;;

(define (handle-diff args)
  "Compare outputs between master host and other hosts."
  (define option-spec
    '((help        (single-char #\h) (value #f))
      (get-pattern (single-char #\g) (value #f))
      (continue    (single-char #\c) (value #f))
      (abort       (single-char #\a) (value #f))))

  (define (print-help)
    (display
     (string-append
      "Usage: lc diff [ -h ] [ -g | -c | -a ]\n"
      "\n"
      "Parameters:\n"
      "  -h, --help               Print this message\n"
      "  -g, --get-pattern        Get pattern from a master host\n"
      "  -c, --continue           Execute command on the rest of hosts\n"
      "  -a, --abort              Delete the stored pattern\n"
      "\n"
      "Examples:\n"
      "  $ lc diff --get-pattern -- uname -a\n"
      "  $ lc diff --continue\n")))

  (if (null? args)

      (print-help)

      (let* ((opt-args        (cons "handle-diff" args))
             (options         (getopt-long opt-args option-spec))
             (help-needed?    (option-ref options 'help #f))
             (pattern-needed? (option-ref options 'get-pattern #f))
             (continue?       (option-ref options 'continue    #f))
             (abort?          (option-ref options 'abort       #f))
             (action-args     (option-ref options '()          #f)))

        (cond

         (help-needed?
          (print-help))

         (pattern-needed?
          (if action-args 
              (let ((cmd (string-join action-args " "))
                    (msg-req (make <message>
                               #:type *cmd-diff*
                               #:request-flag #t)))
                (message-field-set! msg-req 'action  'get-pattern)
                (message-field-set! msg-req 'command cmd)

                (let ((msg-rsp (send-message msg-req)))
                  (if msg-rsp
                      (if (not (message-error? msg-rsp))
                          (format-output (message-field-ref msg-rsp 'output))
                          (format-error-message msg-rsp))
                      (format-error *error-connection-lost*))))
              (let ((msg (string-append "No command is specified: "
                                        (object->string args))))
                (format-error msg))))

         (continue?
          (let ((msg-req (make <message> #:type *cmd-diff* #:request-flag #t)))
            (message-field-set! msg-req 'action 'continue)

            (let ((msg-rsp (send-message msg-req)))
              (if msg-rsp
                  (if (not (message-error? msg-rsp))
                      (format-diff (message-field-ref msg-rsp 'output))
                      (format-error-message msg-rsp))
                  (format-error *error-connection-lost*)))))

         (abort?
          (let ((msg-req (make <message> #:type *cmd-diff* #:request-flag #t)))
            (message-field-set! msg-req 'action 'abort)

            (let ((msg-rsp (send-message msg-req)))
              (if msg-rsp
                  (if (message-error? msg-rsp)
                      (format-error-message msg-rsp))
                  (format-error *error-connection-lost*)))))
         (else
          (let ((msg (string-append "No valid action specified: "
                                    (symbol->string  args))))
            (format-error msg)))))))

(define (handle-set args)
  "Set a new value to a option."
  (define (print-help)
    (display
     (string-append
      "Usage: lc set <option> <value>\n"
      "\n"
      "Example:\n"
      "  $ lc set master 5\n")))

  (if (or (null? args)
          (string=? (car args) "--help") (string=? (car args) "-h"))

      (print-help)

      (let ((option (string->symbol (car args)))
            (value  (cadr args))
            (msg-req (make <message> #:type *cmd-set* #:request-flag #t)))

        (message-field-set! msg-req 'option option)
        (message-field-set! msg-req 'value  value)
        (let ((msg-rsp (send-message msg-req)))
          (if msg-rsp
              (if (message-error? msg-rsp)
                  (format-error-message msg-rsp))
              (format-error *error-connection-lost*))))))

(define (handle-get args)
  "Get the value of an option."
  (define (print-help)
    (display
     (string-append
      "Usage: lc get <option>\n"
      "\n"
      "Example:\n"
      "  $ lc get master\n")))

  (if (or (null? args)
          (string=? (car args) "--help") (string=? (car args) "-h"))

      (print-help)
  
      (let ((option (string->symbol (car args)))
            (msg-req (make <message> #:type *cmd-get* #:request-flag #t)))
        (message-field-set! msg-req 'option option)
        (let ((msg-rsp (send-message msg-req)))
          (if msg-rsp
              (if (not (message-error? msg-rsp))
                  (begin
                    (display (message-field-ref msg-rsp 'value))
                    (newline))
                  (format-error-message msg-rsp))
              (format-error *error-connection-lost*))))))

(define (handle-list args)
  "Show a list of objects of the specific type."
  (define (print-help)
    (display
     (string-append
      "Usage: lc list <object-type> [args]\n"
      "       lc list hosts [host-id]\n"
      "\n"
      "Available object types:\n"
      "  h, hosts        List hosts\n"
      "  o, options      List options\n"
      "\n"
      "Examples:\n"
      "  $ lc list hosts\n"
      "  $ lc list hosts 1\n"
      "  $ lc list options\n")))

  (cond
   ((or (null? args) (string=? (car args) "--help") (string=? (car args) "-h"))
    (print-help))

   ((or (string=? (car args) "hosts") (string=? (car args) "h"))
    (let ((msg-req (make <message> #:type *cmd-list* #:request-flag #t))
          (host-id #f))
      (message-field-set! msg-req 'object-type 'host)

      (if (not (null? (cdr args)))
          (begin
            (set! host-id (string->number (cadr args)))
            (message-field-set! msg-req 'host-id host-id)))

      (let ((msg-rsp (send-message msg-req)))
        (if msg-rsp
            (if (not (message-error? msg-rsp))
                (if host-id
                    (format-host (message-field-ref msg-rsp 'serialized-host))
                    (format-host-list (message-field-ref msg-rsp 'object-list)))
                (format-error-message msg-rsp))
            (format-error *error-connection-lost*)))))

   ((or (string=? (car args) "options") (string=? (car args) "o"))
    (let ((msg-req (make <message> #:type *cmd-list* #:request-flag #t)))
      (message-field-set! msg-req 'object-type 'option)
      (let ((msg-rsp (send-message msg-req)))
        (if msg-rsp
            (if (not (message-error? msg-rsp))
                (format-options-list (message-field-ref msg-rsp 'object-list))
                (format-error-message msg-rsp))
            (format-error *error-connection-lost*)))))

   (#t
    (format-error "Unknown command."))))

(define (handle-stop)
  "Stop lazycat daemon"
  (let ((msg-req (make <message> #:type *cmd-stop* #:request-flag #t)))
    (send-message msg-req)))

;;; Helper procedures

(define (print-version)
  "Get information about the current version"
  (display
   (string-append
    "Version:          " *version* "\n"
    "Protocol version: " (number->string *protocol-version*) "\n")))

(define (print-help-and-exit)
  (display
   (string-append "\
Usage: lc <command>

Possible commands:
  a, add        add a new host
  d, diff       compare outputs from hosts
  e, exec       execute a command
  t, translate  translate a command
  g, get        get current value of an option
  l, list       list objects
  r, rem        remove host
  s, set        set a new value for an option
  stop          stop LazyCat daemon
  version       print information about current version

Enter 'lc <command> -h' to get documentation for the command.
"))
  (exit 0))


;;; Entry point of the program

(define (main . args)

  (and (null? (cdr args))
       (print-help-and-exit))

  (connect server-port AF_UNIX server-socket-path)
  (let* ((arguments (cdr args))
         (cmd       (car arguments))
         (cmd-args  (cdr arguments)))

    (case* string=? cmd

     (("version")
      (print-version))

     (("add" "a")
      (handle-add cmd-args))

     (("rem" "r")
      (handle-rem cmd-args))

     (("exec" "e")
      (handle-exec cmd-args))

     (("diff" "d")
      (handle-diff cmd-args))

     (("set" "s")
      (handle-set cmd-args))

     (("get" "g")
      (handle-get cmd-args))

     (("list" "l")
      (handle-list cmd-args))

     (("stop")
      (handle-stop))

     (else
      (print-help-and-exit)))

    (lc-quit)))

;;; lc ends here.
